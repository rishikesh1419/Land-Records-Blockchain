{
  "_args": [
    [
      "emitter@http://github.com/component/emitter/archive/1.0.1.tar.gz",
      "/home/rishikesh/Desktop/land-records/land-records/node_modules/tomahawk/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser"
    ]
  ],
  "_from": "http://github.com/component/emitter/archive/1.0.1.tar.gz",
  "_id": "emitter@1.0.1",
  "_inCache": true,
  "_location": "/tomahawk/socket.io/socket.io-adapter/socket.io-parser/emitter",
  "_phantomChildren": {},
  "_requested": {
    "name": "emitter",
    "raw": "emitter@http://github.com/component/emitter/archive/1.0.1.tar.gz",
    "rawSpec": "http://github.com/component/emitter/archive/1.0.1.tar.gz",
    "scope": null,
    "spec": "http://github.com/component/emitter/archive/1.0.1.tar.gz",
    "type": "remote"
  },
  "_requiredBy": [
    "/tomahawk/socket.io/socket.io-adapter/socket.io-parser"
  ],
  "_resolved": "http://github.com/component/emitter/archive/1.0.1.tar.gz",
  "_shasum": "ecf2b3245322eefd38409ffb899e0d0003fa6fe9",
  "_shrinkwrap": null,
  "_spec": "emitter@http://github.com/component/emitter/archive/1.0.1.tar.gz",
  "_where": "/home/rishikesh/Desktop/land-records/land-records/node_modules/tomahawk/node_modules/socket.io/node_modules/socket.io-adapter/node_modules/socket.io-parser",
  "component": {
    "scripts": {
      "emitter": "index.js"
    }
  },
  "dependencies": {
    "indexof": "0.0.1"
  },
  "description": "Event emitter",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "name": "emitter",
  "optionalDependencies": {},
  "readme": "# Emitter\n\n  Event emitter component.\n\n## Installation\n\n```\n$ component install component/emitter\n```\n\n## API\n\n### Emitter(obj)\n\n  The `Emitter` may also be used as a mixin. For example\n  a \"plain\" object may become an emitter, or you may\n  extend an existing prototype.\n\n  As an `Emitter` instance:\n\n```js\nvar Emitter = require('emitter');\nvar emitter = new Emitter;\nemitter.emit('something');\n```\n\n  As a mixin:\n\n```js\nvar Emitter = require('emitter');\nvar user = { name: 'tobi' };\nEmitter(user);\n\nuser.emit('im a user');\n```\n\n  As a prototype mixin:\n\n```js\nvar Emitter = require('emitter');\nEmitter(User.prototype);\n```\n  \n### Emitter#on(event, fn)\n\n  Register an `event` handler `fn`.\n\n### Emitter#once(event, fn)\n\n  Register a single-shot `event` handler `fn`,\n  removed immediately after it is invoked the\n  first time.\n\n### Emitter#off(event, fn)\n\n  Remove `event` handler `fn`, or pass only the `event`\n  name to remove all handlers for `event`.\n\n### Emitter#emit(event, ...)\n\n  Emit an `event` with variable option args.\n\n### Emitter#listeners(event)\n\n  Return an array of callbacks, or an empty array.\n\n### Emitter#hasListeners(event)\n\n  Check if this emitter has `event` handlers.",
  "readmeFilename": "Readme.md",
  "version": "1.0.1"
}
